(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{439:function(t,s,v){t.exports=v.p+"assets/img/code-org.eb383976.png"},440:function(t,s,v){t.exports=v.p+"assets/img/router.e186166b.png"},456:function(t,s,v){"use strict";v.r(s);var _=v(50),e=Object(_.a)({},(function(){var t=this,s=t.$createElement,_=t._self._c||s;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"代码结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#代码结构"}},[t._v("#")]),t._v(" 代码结构")]),t._v(" "),_("p",[t._v("代码结构是在目录结构的基础上，对代码组织规范做进一步约定，主要目的事实现样式和脚本隔离，避免代码污染。")]),t._v(" "),_("h2",{attrs:{id:"代码组织关系"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#代码组织关系"}},[t._v("#")]),t._v(" 代码组织关系")]),t._v(" "),_("ul",[_("li",[_("p",[_("strong",[t._v("主模块与业务模块")]),t._v("的关系，类似于微前端架构中的"),_("strong",[t._v("主应用")]),t._v("与"),_("strong",[t._v("微应用")]),t._v("。从目录结构上看他们是平级的，但对于项目整体来说主模块是项目入口，是所有业务模块的父节点，主模块就像一个托盘一样托起所有业务模块，这是主模块与其他模块的根本区别。")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("业务模块之间")]),t._v("是平级的，在开发过程中也应该是解耦的，模块间要尽可能减少资源依赖，即所谓“高内聚，低耦合”；确实有需要跨模块共享的代码，可以提炼为公共代码。")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("业务模块内部")]),t._v("可以根据实际情况继续拆分子模块，比如一个功能体量相对较大的模块，为了让开发关注点始终聚焦在一个相对小的范围内，可以根据功能细分再拆成多个小模块，大小模块间的路由关系如同主模块跟大模块的关系。")])])]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("开发规范")]),t._v(" "),_("ol",[_("li",[t._v("主模块原则上应只提供项目公共layout和必要的全局资源，否则容易增加与业务模块的冲突；内部尽量少做业务逻辑实现，否则会降低业务模块独立性。")]),t._v(" "),_("li",[t._v("业务模块原则上不能产生任何全局资源（样式和脚本），内部实现应最大限度保持独立性。")])])]),t._v(" "),_("p",[t._v("项目整体的代码组织关系如下图：")]),t._v(" "),_("p",[_("img",{attrs:{src:v(439),alt:"代码组织"}})]),t._v(" "),_("p",[t._v("对应的路由关系如下图：")]),t._v(" "),_("p",[_("img",{attrs:{src:v(440),alt:"路由关系"}})]),t._v(" "),_("h2",{attrs:{id:"公共代码"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#公共代码"}},[t._v("#")]),t._v(" 公共代码")]),t._v(" "),_("p",[t._v("公共代码管理的主要目的是减少项目内造轮子，提高协同开发效率。")]),t._v(" "),_("ul",[_("li",[_("p",[_("strong",[t._v("项目级公共代码")]),t._v("应该尽可能提炼到主模块中，由主模块充当各个业务模块的公共资源池，比如通用接口（"),_("code",[t._v("@/main/api/common.js")]),t._v("）、公共组件（"),_("code",[t._v("@/main/components/")]),t._v("）、公共路由（登录注册页面）等。在项目开发过程中，开发组成员应维护一个"),_("code",[t._v("公共资源文档")]),t._v("，列明自己维护的公共代码及使用文档。")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("模块资源引用")]),t._v("，引用外部资源应该始终使用全路径，如（"),_("code",[t._v("@/${MoudleName}/assets/util.js")]),t._v("）；反之引用模块内部资源应该始终使用相对路径，如（"),_("code",[t._v("../assets/util.js")]),t._v("），以明确区分跨模块依赖关系。")])])]),t._v(" "),_("h2",{attrs:{id:"js三层结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#js三层结构"}},[t._v("#")]),t._v(" JS三层结构")]),t._v(" "),_("ul",[_("li",[t._v("通用功能："),_("code",[t._v("@/core/index.js")]),t._v("是框架内置的功能实现，项目内可以随意调用。")]),t._v(" "),_("li",[t._v("模块脚本："),_("code",[t._v("@/[Moudle Folder]/assets/util.js")]),t._v("是当前模块具备复用性的脚本，通常只在当前模块内使用。")]),t._v(" "),_("li",[t._v("组件方法：每个vue组件/页面的内部方法，仅作用于当前vue文件。")])]),t._v(" "),_("h2",{attrs:{id:"css三层结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#css三层结构"}},[t._v("#")]),t._v(" CSS三层结构")]),t._v(" "),_("ul",[_("li",[t._v("全局样式："),_("code",[t._v("@/core/global.css")]),t._v("是全局样式，被根组件引用，作用于项目全局。")]),t._v(" "),_("li",[t._v("模块样式："),_("code",[t._v("@/[Moudle Folder]/assets/style.css")]),t._v("是模块级样式，被模块根组件引用，作用于当前模块。")]),t._v(" "),_("li",[t._v("组件样式：每个vue组件/页面的局部样式，仅作用于当前vue文件。")])]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("框架能力")]),t._v(" "),_("p",[t._v("前往"),_("a",{attrs:{href:"/guide/framework-core"}},[t._v("【指南】")]),t._v("近一步了解"),_("strong",[t._v("CuttingMat")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);