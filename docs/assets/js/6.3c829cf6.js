(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{439:function(s,t,v){s.exports=v.p+"assets/img/code-org.eb383976.png"},440:function(s,t,v){s.exports=v.p+"assets/img/router.e186166b.png"},462:function(s,t,v){"use strict";v.r(t);var _=v(50),e=Object(_.a)({},(function(){var s=this,t=s.$createElement,_=s._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[_("h1",{attrs:{id:"代码结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#代码结构"}},[s._v("#")]),s._v(" 代码结构")]),s._v(" "),_("p",[s._v("代码结构是在目录结构的基础上，对代码组织规范做进一步约定。")]),s._v(" "),_("h2",{attrs:{id:"代码组织关系"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#代码组织关系"}},[s._v("#")]),s._v(" 代码组织关系")]),s._v(" "),_("ul",[_("li",[_("p",[_("strong",[s._v("主模块与业务模块")]),s._v("从目录结构上看是平级的，但对于项目整体来说，主模块是项目入口，是所有业务模块的父节点，主模块就像一个托盘一样托起所有业务模块，这是主模块与其他模块的根本区别。")])]),s._v(" "),_("li",[_("p",[_("strong",[s._v("业务模块之间")]),s._v("是平级的，在开发过程中也应该是解耦的，模块间要尽可能减少资源依赖，即所谓“高内聚，低耦合”；确实有需要跨模块共享的代码，可以提炼为公共代码。")])]),s._v(" "),_("li",[_("p",[_("strong",[s._v("业务模块内部")]),s._v("可以根据实际情况继续拆分子模块，比如一个功能体量相对较大的模块，为了让开发关注点始终聚焦在一个相对小的范围内，可以根据功能细分再拆成多个小模块，大小模块间的路由关系如同主模块跟大模块的关系。")])])]),s._v(" "),_("p",[s._v("项目整体的代码组织关系如下图：")]),s._v(" "),_("p",[_("img",{attrs:{src:v(439),alt:"代码组织"}})]),s._v(" "),_("p",[s._v("对应的路由关系如下图：")]),s._v(" "),_("p",[_("img",{attrs:{src:v(440),alt:"路由关系"}})]),s._v(" "),_("h2",{attrs:{id:"公共代码"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#公共代码"}},[s._v("#")]),s._v(" 公共代码")]),s._v(" "),_("p",[s._v("公共代码管理的主要目的是减少项目内造轮子，提高协同开发效率。")]),s._v(" "),_("ul",[_("li",[_("p",[_("strong",[s._v("项目级公共代码")]),s._v("应该尽可能提炼到主模块中，由主模块充当各个业务模块的公共资源池，比如通用接口（"),_("code",[s._v("@/main/api/common.js")]),s._v("）、公共组件（"),_("code",[s._v("@/main/components/")]),s._v("）、公共路由（登录注册页面）等。在项目开发过程中，开发组成员应维护一个"),_("code",[s._v("公共资源文档")]),s._v("，列明自己维护的公共代码及使用文档。")])]),s._v(" "),_("li",[_("p",[_("strong",[s._v("模块资源引用")]),s._v("，引用外部资源应该始终使用全路径，如（"),_("code",[s._v("@/${MoudleName}/assets/util.js")]),s._v("）；反之引用模块内部资源应该始终使用相对路径，如（"),_("code",[s._v("../assets/util.js")]),s._v("），以明确区分跨模块依赖关系。")])])]),s._v(" "),_("h2",{attrs:{id:"js三层结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#js三层结构"}},[s._v("#")]),s._v(" JS三层结构")]),s._v(" "),_("ul",[_("li",[s._v("通用功能："),_("code",[s._v("@/core/index.js")]),s._v("是框架内置的功能实现，项目内可以随意调用。")]),s._v(" "),_("li",[s._v("模块脚本："),_("code",[s._v("@/[Moudle Folder]/assets/util.js")]),s._v("是当前模块具备复用性的脚本，通常只在当前模块内使用。")]),s._v(" "),_("li",[s._v("组件方法：每个vue组件/页面的内部方法，仅作用于当前vue文件。")])]),s._v(" "),_("h2",{attrs:{id:"css三层结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#css三层结构"}},[s._v("#")]),s._v(" CSS三层结构")]),s._v(" "),_("ul",[_("li",[s._v("全局样式："),_("code",[s._v("@/core/global.css")]),s._v("是全局样式，被根组件引用，作用于项目全局。")]),s._v(" "),_("li",[s._v("模块样式："),_("code",[s._v("@/[Moudle Folder]/assets/style.css")]),s._v("是模块级样式，被模块根组件引用，作用于当前模块。")]),s._v(" "),_("li",[s._v("组件样式：每个vue组件/页面的局部样式，仅作用于当前vue文件。")])]),s._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[s._v("框架能力")]),s._v(" "),_("p",[s._v("前往"),_("a",{attrs:{href:"/guide/framework-core"}},[s._v("【指南】")]),s._v("近一步了解"),_("strong",[s._v("CuttingMat")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);